pipeline {
    agent any

    parameters {
        choice(name: 'BROWSER', choices: ['chromium', 'firefox', 'webkit'], description: 'Choose browser')
        string(name: 'TAGS', defaultValue: '@login', description: 'Behave tags to run')
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Set up Python venv') {
            steps {
                sh 'python3 -m venv .venv'
                sh '. .venv/bin/activate && pip install --upgrade pip'
                sh '. .venv/bin/activate && pip install -r requirements.txt'
                sh '. .venv/bin/activate && playwright install'
            }
        }
        stage('Run Behave Tests') {
            steps {
                sh '''
                    . .venv/bin/activate && \
                    behave --define browser=${BROWSER} --tags=${TAGS} \
                    --format=allure_behave.formatter:AllureFormatter --outfile=allure-results features/
                '''
            }
        }
        stage('Generate Allure Report') {
            steps {
                sh '. .venv/bin/activate && allure generate allure-results --clean -o allure-results'
            }
            // This stage will still be skipped if previous stage fails,
            // so we move archiving and publishing to post block below.
        }
    }
    post {
        always {
            // Archive artifacts even if the build fails
            archiveArtifacts artifacts: 'allure-results/**', allowEmptyArchive: true
            archiveArtifacts artifacts: 'screenshots/**', allowEmptyArchive: true
            archiveArtifacts artifacts: 'videos/**', allowEmptyArchive: true
            archiveArtifacts artifacts: 'logs/**', allowEmptyArchive: true

            // Publish Allure report (if plugin is installed)
            allure includeProperties: false, jdk: '', results: [[path: 'allure-results']]

            // Clean workspace
            cleanWs()
        }
    }
}